// Code generated by MockGen. DO NOT EDIT.
// Source: ./image.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_image_service.go -package=mocks -source=./image.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "bandlab_feed_server/model/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// GetPresignedURL mocks base method.
func (m *MockImageService) GetPresignedURL(ctx context.Context, filename string, filesize int64) (*dto.GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURL", ctx, filename, filesize)
	ret0, _ := ret[0].(*dto.GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL.
func (mr *MockImageServiceMockRecorder) GetPresignedURL(ctx, filename, filesize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockImageService)(nil).GetPresignedURL), ctx, filename, filesize)
}

// GetPublicImageURL mocks base method.
func (m *MockImageService) GetPublicImageURL(ctx context.Context, imagePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicImageURL", ctx, imagePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicImageURL indicates an expected call of GetPublicImageURL.
func (mr *MockImageServiceMockRecorder) GetPublicImageURL(ctx, imagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicImageURL", reflect.TypeOf((*MockImageService)(nil).GetPublicImageURL), ctx, imagePath)
}

// RawImageExists mocks base method.
func (m *MockImageService) RawImageExists(ctx context.Context, imagePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawImageExists", ctx, imagePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawImageExists indicates an expected call of RawImageExists.
func (mr *MockImageServiceMockRecorder) RawImageExists(ctx, imagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawImageExists", reflect.TypeOf((*MockImageService)(nil).RawImageExists), ctx, imagePath)
}

// ResizeAndUploadImage mocks base method.
func (m *MockImageService) ResizeAndUploadImage(ctx context.Context, imagePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeAndUploadImage", ctx, imagePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeAndUploadImage indicates an expected call of ResizeAndUploadImage.
func (mr *MockImageServiceMockRecorder) ResizeAndUploadImage(ctx, imagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeAndUploadImage", reflect.TypeOf((*MockImageService)(nil).ResizeAndUploadImage), ctx, imagePath)
}
