// Code generated by MockGen. DO NOT EDIT.
// Source: ./post.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_post_service.go -package=mocks -source=./post.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dao "bandlab_feed_server/model/dao"
	dto "bandlab_feed_server/model/dto"
	context "context"
	reflect "reflect"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockPostService is a mock of PostService interface.
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService.
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance.
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostService) CreatePost(ctx context.Context, req *dto.CreatePostReq) (*dto.CreatePostResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, req)
	ret0, _ := ret[0].(*dto.CreatePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceMockRecorder) CreatePost(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostService)(nil).CreatePost), ctx, req)
}

// FetchPostDaoById mocks base method.
func (m *MockPostService) FetchPostDaoById(ctx context.Context, postId primitive.ObjectID) (*dao.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPostDaoById", ctx, postId)
	ret0, _ := ret[0].(*dao.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPostDaoById indicates an expected call of FetchPostDaoById.
func (mr *MockPostServiceMockRecorder) FetchPostDaoById(ctx, postId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPostDaoById", reflect.TypeOf((*MockPostService)(nil).FetchPostDaoById), ctx, postId)
}

// FetchPostsByCompositCursor mocks base method.
func (m *MockPostService) FetchPostsByCompositCursor(ctx context.Context, limit int64, previousCompositKey *string) ([]*dao.Post, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPostsByCompositCursor", ctx, limit, previousCompositKey)
	ret0, _ := ret[0].([]*dao.Post)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchPostsByCompositCursor indicates an expected call of FetchPostsByCompositCursor.
func (mr *MockPostServiceMockRecorder) FetchPostsByCompositCursor(ctx, limit, previousCompositKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPostsByCompositCursor", reflect.TypeOf((*MockPostService)(nil).FetchPostsByCompositCursor), ctx, limit, previousCompositKey)
}

// FetchPostsByPostIDCursor mocks base method.
func (m *MockPostService) FetchPostsByPostIDCursor(ctx context.Context, limit int64, previousPostId *primitive.ObjectID) ([]*dao.Post, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPostsByPostIDCursor", ctx, limit, previousPostId)
	ret0, _ := ret[0].([]*dao.Post)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchPostsByPostIDCursor indicates an expected call of FetchPostsByPostIDCursor.
func (mr *MockPostServiceMockRecorder) FetchPostsByPostIDCursor(ctx, limit, previousPostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPostsByPostIDCursor", reflect.TypeOf((*MockPostService)(nil).FetchPostsByPostIDCursor), ctx, limit, previousPostId)
}

// HasImage mocks base method.
func (m *MockPostService) HasImage(req *dto.CreatePostReq) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasImage", req)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasImage indicates an expected call of HasImage.
func (mr *MockPostServiceMockRecorder) HasImage(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasImage", reflect.TypeOf((*MockPostService)(nil).HasImage), req)
}

// UpdatePostComments mocks base method.
func (m *MockPostService) UpdatePostComments(ctx context.Context, postId primitive.ObjectID, comment *dao.Comment, oldPost *dao.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostComments", ctx, postId, comment, oldPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostComments indicates an expected call of UpdatePostComments.
func (mr *MockPostServiceMockRecorder) UpdatePostComments(ctx, postId, comment, oldPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostComments", reflect.TypeOf((*MockPostService)(nil).UpdatePostComments), ctx, postId, comment, oldPost)
}

// UpdatePostStatusAndImagePath mocks base method.
func (m *MockPostService) UpdatePostStatusAndImagePath(ctx context.Context, postId, imagePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostStatusAndImagePath", ctx, postId, imagePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostStatusAndImagePath indicates an expected call of UpdatePostStatusAndImagePath.
func (mr *MockPostServiceMockRecorder) UpdatePostStatusAndImagePath(ctx, postId, imagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostStatusAndImagePath", reflect.TypeOf((*MockPostService)(nil).UpdatePostStatusAndImagePath), ctx, postId, imagePath)
}
